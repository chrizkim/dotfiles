set shell=bash

" Polyglot
" Needs to be declared before loading vim-polyglot
" https://github.com/sheerun/vim-polyglot#troubleshooting
let g:polyglot_disabled=['go', 'terraform']

" ~~~~ Start Plug config ~~~~
call plug#begin('~/.vim/plugged')

Plug 'akinsho/toggleterm.nvim', {'tag': '*'}
Plug 'bling/vim-airline'
Plug 'bronson/vim-visual-star-search'
Plug 'fatih/vim-go', { 'do': 'nvim -c GoUpdateBinaries -c qa!' }
Plug 'hashivim/vim-terraform'
Plug 'honza/vim-snippets'
Plug 'hrsh7th/cmp-buffer'
Plug 'hrsh7th/cmp-nvim-lsp'
Plug 'hrsh7th/cmp-nvim-lsp-signature-help'
Plug 'hrsh7th/cmp-path'
Plug 'hrsh7th/cmp-cmdline'
Plug 'hrsh7th/nvim-cmp'
Plug 'iamcco/markdown-preview.nvim', { 'do': 'cd app && ~/.nodenv/shims/npx --yes yarn install' }
Plug 'jlanzarotta/bufexplorer'
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
Plug 'liuchengxu/vista.vim'
Plug 'mhinz/vim-signify'
Plug 'neovim/nvim-lspconfig'
Plug 'nvim-tree/nvim-tree.lua'
Plug 'nvim-tree/nvim-web-devicons'
Plug 'onsails/lspkind.nvim'
Plug 'quangnguyen30192/cmp-nvim-ultisnips'
Plug 'SirVer/ultisnips'
Plug 'sheerun/vim-polyglot'
Plug 'tomtom/tcomment_vim'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-rhubarb'
Plug 'tpope/vim-sensible'
Plug 'tpope/vim-surround'
Plug 'vim-scripts/InsertChar'
Plug 'vim-utils/vim-husk'

call plug#end()

" ~~~~ End Plug config ~~~~

set nocompatible
set termguicolors

" Mustang colorscheme
set background=dark
hi clear
if exists('syntax_on')
  syntax reset
endif

hi Normal         guifg=#e2e2e2 guibg=#202020 gui=none
hi NonText        guifg=#808080 guibg=none    gui=none
hi LineNr         guifg=#808080 guibg=none    gui=none
hi StatusLine     guifg=#d3d3d3 guibg=#444444 gui=italic
hi StatusLineNC   guifg=#939393 guibg=#444444 gui=none
hi WinSeparator   guifg=#444444 guibg=none    gui=none
hi Folded         guifg=#a0a8b0 guibg=none    gui=none
hi Title          guifg=#f6f3e8 guibg=none    gui=bold
hi Visual         guifg=#faf4c6 guibg=#3c414c gui=none
hi SpecialKey     guifg=#808080 guibg=none    gui=none
hi Cursor         guifg=none    guibg=#626262 gui=none
hi CursorLine     guifg=none    guibg=#2d2d2d gui=none
hi CursorColumn   guifg=none    guibg=#2d2d2d gui=none
hi ColorColumn    guifg=none    guibg=#2d2d2d gui=none
hi MatchParen     guifg=#d0ffc0 guibg=#2f2f2f gui=bold
hi Pmenu          guifg=none    guibg=#444444 gui=none
hi PmenuSel       guifg=#000000 guibg=#b1d631 gui=none
hi NormalFloat    guifg=none    guibg=none    gui=none
hi FloatBorder    guifg=#444444 guibg=none    gui=none
hi Directory      guifg=#a5aebe guibg=none    gui=none
hi Title          guifg=#b1d631 guibg=none    gui=none
hi DiagnosticInfo guifg=#b1d631 guibg=none    gui=none
hi MoreMsg        guifg=#b1d631 guibg=none    gui=bold
hi Question       guifg=#b1d631 guibg=none    gui=bold

hi Comment    guifg=#808080 guibg=none    gui=italic
hi Todo       guifg=#808080 guibg=#e6ea50 gui=italic
hi Boolean    guifg=#b1d631 guibg=none    gui=none
hi String     guifg=#b1d631 guibg=none    gui=italic
hi Identifier guifg=#b1d631 guibg=none    gui=none
hi Function   guifg=#ffffff guibg=none    gui=bold
hi Type       guifg=#7e8aa2 guibg=none    gui=none
hi Statement  guifg=#7e8aa2 guibg=none    gui=none
hi Keyword    guifg=#ff9800 guibg=none    gui=none
hi Constant   guifg=#ff9800 guibg=none    gui=none
hi Number     guifg=#ff9800 guibg=none    gui=none
hi Special    guifg=#ff9800 guibg=none    gui=none
hi PreProc    guifg=#faf4c6 guibg=none    gui=italic
hi Error      guifg=none    guibg=#af0000 gui=none
hi ErrorMsg   guifg=#df0000 guibg=none    gui=none
hi! link DiagnosticError ErrorMsg

hi NvimTreeExecFile    guifg=#ff9800 guibg=none    gui=none
hi NvimTreeImageFile   guifg=#cdd2db guibg=none    gui=none
hi NvimTreeSpecialFile guifg=#808080 guibg=none    gui=italic
hi NvimTreeSymlink     guifg=#faf4c6 guibg=none    gui=none
hi! link NvimInternalError Error

" View options
set nowrap
set nu
set showcmd
set title

" Consistency
nmap Y y$
vmap y ygv<ESC>
nmap p p`]

" Visual move
vmap K :m '<-2<CR>gv=gv
vmap J :m '>+1<CR>gv=gv

" Enable mouse
set mouse=a

" Use system clipboard
set clipboard=unnamed

" Sudo write
cmap w!! w !sudo -S tee > /dev/null %

" Cursor styles for Insert/Replace/Normal modes
let &t_SI='\e[6 q'
let &t_SR='\e[4 q'
let &t_EI='\e[2 q'

" Highlight row and column
set cursorline
set cursorcolumn

" Only display cursorline on active pane
" From: http://stackoverflow.com/questions/12017331/how-can-i-make-vim-highlight-the-current-line-on-only-the-active-buffer
augroup CursorLine
  au!
  au VimEnter,WinEnter,BufWinEnter * setlocal cursorline cursorcolumn
  au WinLeave * setlocal nocursorline nocursorcolumn
augroup END

" Tab options
set expandtab
set shiftwidth=2
set softtabstop=2
set tabstop=2

" Indent shortcuts
vmap > >gv
vmap < <gv
nmap > >>
nmap < <<

" Search options
set hlsearch
set ignorecase
set smartcase

" Set leader to Space
let mapleader="\<space>"

" Open new buffers helpers
nmap <leader>sh :leftabove vnew<CR>
nmap <leader>sl :rightbelow vnew<CR>
nmap <leader>sk :leftabove new<CR>
nmap <leader>sj :rightbelow new<CR>
nmap <leader>st :tabnew<CR>

" Edit file helpers
nmap <leader>ew :e <C-R>=expand('%:h').'/'<CR>
nmap <leader>es :sp <C-R>=expand('%:h').'/'<CR>
nmap <leader>ev :vsp <C-R>=expand('%:h').'/'<CR>
nmap <leader>et :tabe <C-R>=expand('%:h').'/'<CR>

" Highlight trailiing whitespace
match Error '\s\+$'
nmap <leader>rtw :%s/\s\+$//e<CR>``

" Insert current directory path into a command
cnoremap <expr> <C-P> getcmdline()[getcmdpos()-2] ==# ' ' ? expand('%:p:h').'/' : '\<C-P>'

" Find merge conflict markers
nmap <silent> <leader>fc <ESC>/\v^[<=>\|]{7}( .*\|$)<CR>

" Jump diagnostic
nmap <leader>j :lua vim.diagnostic.goto_next()<CR>

" Set Python virtualenv
let g:python3_host_prog='~/.pyenv/versions/neovim/bin/python'

" Disable unused providers
let g:loaded_ruby_provider=0
let g:loaded_node_provider=0
let g:loaded_perl_provider=0

" Set shell to fish
set shell=fish

" Insert single character
nmap <C-I> :<C-U>call InsertChar#insert(v:count1)<CR>

" FZF
nmap <C-P> :Files<CR>

" BufExplorer
function! BufExplorerVToggle()
  let winnr=bufwinnr('\[BufExplorer]')

  if winnr == -1
    execute 'BufExplorerVerticalSplit'
    execute 'vertical resize 31'
  else
    execute winnr . 'wincmd c'
  endif
endfunction

command! BufExplorerVToggle :call BufExplorerVToggle()
let g:bufExplorerDisableDefaultKeyMapping=1
nmap <leader>b :BufExplorerVToggle<CR>

" nvim-tree
if has('nvim') && isdirectory(g:plugs['nvim-tree.lua'].dir)
lua <<EOF
  vim.g.loaded_netrw = 1
  vim.g.loaded_netrwPlugin = 1

  require('nvim-tree').setup({
    actions = {
      open_file = {
        quit_on_open = true,
        window_picker = {
          enable = false,
        },
      },
    },
    filters = {
      dotfiles = true,
    },
  })
EOF
endif
nmap <leader>n :NvimTreeToggle<CR>

" tComment
let g:tcomment_mapleader1=''
let g:tcomment_opleader1=''
let g:tcomment_opleader2=''
nmap <C-_> :TComment<CR>
vmap <C-_> :TCommentMaybeInline<CR>gv<ESC>
imap <C-_> <C-O>:TComment<CR>

" Go
let g:go_fmt_command='goimports'

" Terraform
let g:terraform_fmt_on_save=1

" ToggleTerm
lua require('toggleterm').setup()
nmap <leader>y :ToggleTerm direction=horizontal<CR>
nmap <leader>t :ToggleTerm direction=float<CR>
tmap <ESC> <C-\><C-N>
tmap <C-\><C-Q> <ESC>:ToggleTerm<CR>

" Markdown
au BufRead,BufNewFile *.md setlocal textwidth=80
let g:mkdp_auto_start=0
nmap <leader>p <Plug>MarkdownPreviewToggle

" UltiSnips
let g:UltiSnipsExpandTrigger='<Plug>(ultisnips_expand)'
let g:UltiSnipsJumpForwardTrigger='<Plug>(ultisnips_jump_forward)'
let g:UltiSnipsJumpBackwardTrigger='<Plug>(ultisnips_jump_backward)'
let g:UltiSnipsListSnippets='<C-X><C-S>'
let g:UltiSnipsRemoveSelectModeMappings=0

" Vista
let g:vista_default_executive='nvim_lsp'
nmap <leader>m :Vista!!<CR>

" LSP
nmap <C-K> :lua vim.lsp.buf.hover()<CR>
nmap <C-J> hl

" nvim-cmp
if has('nvim') && isdirectory(g:plugs['nvim-lspconfig'].dir)
lua <<EOF
  local t = function(str)
      return vim.api.nvim_replace_termcodes(str, true, true, true)
  end

  local cmp = require('cmp')
  local lspkind = require('lspkind')

  cmp.setup({
    formatting = {
      format = lspkind.cmp_format({
        preset = 'codicons',
        mode = 'symbol_text',
        menu = ({
          buffer = '[Buffer]',
          path = '[Path]',
          nvim_lsp = '[LSP]',
          ultisnips = '[Snip]',
        }),
      }),
    },
    view = {
      entries = {
        name = 'custom',
        selection_order = 'top_down',
      },
    },
    snippet = {
      expand = function(args)
        vim.fn['UltiSnips#Anon'](args.body)
      end,
    },
    window = {
      completion = cmp.config.window.bordered(),
      documentation = cmp.config.window.bordered(),
    },
    mapping = {
      ['<Esc>'] = cmp.mapping({
        c = cmp.mapping.close(),
      }),
      ['<Tab>'] = cmp.mapping({
        c = function()
          if cmp.visible() then
            cmp.select_next_item({ behavior = cmp.SelectBehavior.Insert })
          else
            cmp.complete()
          end
        end,
        i = function(fallback)
          if cmp.visible() then
            cmp.select_next_item({ behavior = cmp.SelectBehavior.Insert })
          elseif vim.fn['UltiSnips#CanJumpForwards']() == 1 then
            vim.api.nvim_feedkeys(t('<Plug>(ultisnips_jump_forward)'), 'm', true)
          else
            fallback()
          end
        end,
        s = function(fallback)
          if vim.fn['UltiSnips#CanJumpForwards']() == 1 then
            vim.api.nvim_feedkeys(t('<Plug>(ultisnips_jump_forward)'), 'm', true)
          else
            fallback()
          end
        end
      }),
      ['<S-Tab>'] = cmp.mapping({
        c = function()
          if cmp.visible() then
            cmp.select_prev_item({ behavior = cmp.SelectBehavior.Insert })
          else
            cmp.complete()
          end
        end,
        i = function(fallback)
          if cmp.visible() then
            cmp.select_prev_item({ behavior = cmp.SelectBehavior.Insert })
          elseif vim.fn['UltiSnips#CanJumpBackwards']() == 1 then
            return vim.api.nvim_feedkeys( t('<Plug>(ultisnips_jump_backward)'), 'm', true)
          else
            fallback()
          end
        end,
        s = function(fallback)
          if vim.fn['UltiSnips#CanJumpBackwards']() == 1 then
            return vim.api.nvim_feedkeys( t('<Plug>(ultisnips_jump_backward)'), 'm', true)
          else
            fallback()
          end
        end
      }),
      ['<Down>'] = cmp.mapping(cmp.mapping.select_next_item({ behavior = cmp.SelectBehavior.Select }), {'i'}),
      ['<Up>'] = cmp.mapping(cmp.mapping.select_prev_item({ behavior = cmp.SelectBehavior.Select }), {'i'}),
      ['<C-n>'] = cmp.mapping({
        c = function()
          if cmp.visible() then
            cmp.select_next_item({ behavior = cmp.SelectBehavior.Select })
          else
            vim.api.nvim_feedkeys(t('<Down>'), 'n', true)
          end
        end,
        i = function(fallback)
          if cmp.visible() then
            cmp.select_next_item({ behavior = cmp.SelectBehavior.Select })
          else
            fallback()
          end
        end
      }),
      ['<C-p>'] = cmp.mapping({
        c = function()
          if cmp.visible() then
            cmp.select_prev_item({ behavior = cmp.SelectBehavior.Select })
          else
            vim.api.nvim_feedkeys(t('<Up>'), 'n', true)
          end
        end,
        i = function(fallback)
          if cmp.visible() then
            cmp.select_prev_item({ behavior = cmp.SelectBehavior.Select })
          else
            fallback()
          end
        end
      }),
      ['<C-b>'] = cmp.mapping(cmp.mapping.scroll_docs(-4), {'i', 'c'}),
      ['<C-f>'] = cmp.mapping(cmp.mapping.scroll_docs(4), {'i', 'c'}),
      ['<C-Space>'] = cmp.mapping(cmp.mapping.complete(), {'i', 'c'}),
      ['<C-e>'] = cmp.mapping({ i = cmp.mapping.close(), c = cmp.mapping.close() }),
      ['<CR>'] = cmp.mapping({
        i = cmp.mapping.confirm({ behavior = cmp.ConfirmBehavior.Replace, select = false }),
      }),
    },
    sources = cmp.config.sources({
      { name = 'nvim_lsp' },
      { name = 'ultisnips' },
    }, {
      { name = 'nvim_lsp_signature_help' },
    }, {
      { name = 'path' },
      { name = 'buffer' },
    })
  })

  cmp.setup.cmdline({ '/', '?' }, {
    mapping = cmp.mapping.preset.cmdline(),
    sources = {
      { name = 'buffer' }
    }
  })

  cmp.setup.cmdline(':', {
    mapping = cmp.mapping.preset.cmdline(),
    sources = cmp.config.sources({
      { name = 'path' }
    }, {
      { name = 'cmdline' }
    })
  })

  local capabilities = require('cmp_nvim_lsp').default_capabilities()
  local lspconfig = require('lspconfig')

  local lsps = {
    'gopls',
    'pyright',
    'terraformls',
    'tsserver',
  }

  for _, lsp in ipairs(lsps) do
    lspconfig[lsp].setup {
      capabilities = capabilities
    }
  end

  vim.lsp.handlers['textDocument/hover'] = vim.lsp.with(
    vim.lsp.handlers.hover,
    {
      border = 'rounded',
      style = 'minimal',
      max_width = 80,
      silent = true,
    }
  )
  vim.lsp.handlers['textDocument/signatureHelp'] = vim.lsp.with(
    vim.lsp.handlers.signature_help, {
      border = 'rounded',
      close_events = {'BufHidden', 'InsertLeave'},
    }
  )
  vim.diagnostic.config {
    float = {
      border = 'rounded',
    }
  }

  vim.o.updatetime = 1000
  vim.api.nvim_create_autocmd({ 'CursorHold', 'CursorHoldI' }, {
    group = vim.api.nvim_create_augroup('float_diagnostic', { clear = true }),
    callback = function ()
      vim.diagnostic.open_float(nil, {focus=false})
    end
  })

  vim.lsp.set_log_level('off')
EOF
endif
